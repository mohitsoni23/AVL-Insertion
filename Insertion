/* Class node is defined as :
    class Node 
       int val;   //Value
       int ht;      //Height
       Node left;   //Left child
       Node right;   //Right child

   */
static Node insert(Node root,int val){
    Node newNode = new Node();
    newNode.val  = val;
    newNode.ht = 0;
    newNode.left = null;
    newNode.right = null;
    if(root == null){
        root=  newNode;
    }
    if(val<root.val){
        root.left = insert(root.left,val);
    }
    else if(val>root.val){
        root.right = insert(root.right,val);
    }
    else 
        return root;
    
    root.ht = 1+ Math.max(height(root.left), height(root.right));
    
    int bal = balance(root);
    
    if( bal > 1 && val<root.left.val)
        return rotateRight(root);
    if(bal < -1 && val>root.right.val)
        return rotateLeft(root);
    if(bal >1 && val >root.left.val){
        root.left = rotateLeft(root.left);
        return rotateRight(root);
    }
    if(bal <-1 && val< root.right.val){
        root.right  = rotateRight(root.right);
        return rotateLeft(root);
    }
    return root;
}
static int height(Node root){
    if(root == null){
        return -1;
    }else 
        return root.ht;
}

static Node rotateRight(Node root){
    Node newNode = root.left;
    root.left = newNode.right;
    newNode.right = root;
    
    root.ht= 1+ Math.max(height(root.left), height(root.right));
    newNode.ht = 1+ Math.max(height(newNode.left), height(newNode.right));
    
    return newNode;
}
static Node rotateLeft(Node root){
    Node newNode = root.right;
    root.right = newNode.left;
    newNode.left = root;
    
    root.ht= 1+ Math.max(height(root.left), height(root.right));
    newNode.ht = 1+ Math.max(height(newNode.left), height(newNode.right));
    
    return newNode; 
}
static int balance(Node N){
    if(N==null){
        return 0;
    }
    return height(N.left) -height(N.right);
}

